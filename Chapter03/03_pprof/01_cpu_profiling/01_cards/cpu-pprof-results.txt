Type: cpu
Time: Jul 11, 2019 at 8:24am (AEST)
Duration: 30.11s, Total samples = 4.58mins (911.90%)
Entering interactive mode (type "help" for commands, "o" for options)
(pprof) top20 -cum
Showing nodes accounting for 272.09s, 99.10% of 274.56s total
Dropped 162 nodes (cum <= 1.37s)
      flat  flat%   sum%        cum   cum%
     0.01s 0.0036% 0.0036%    272.93s 99.41%  net/http.(*conn).serve
    52.55s 19.14% 19.14%    272.58s 99.28%  github.com/corsc/Beyond-Effective-Go/Chapter03/03_pprof/01_cpu_profiling/game.Shuffle
         0     0% 19.14%    272.58s 99.28%  main.CardShuffler
         0     0% 19.14%    272.58s 99.28%  net/http.(*ServeMux).ServeHTTP
         0     0% 19.14%    272.58s 99.28%  net/http.HandlerFunc.ServeHTTP
         0     0% 19.14%    272.58s 99.28%  net/http.serverHandler.ServeHTTP
         0     0% 19.14%    216.94s 79.01%  runtime.printint
    26.02s  9.48% 28.62%    216.94s 79.01%  runtime.printuint
         0     0% 28.62%    191.86s 69.88%  runtime.gwrite
   191.86s 69.88% 98.50%    191.86s 69.88%  runtime.write
         0     0% 98.50%    191.86s 69.88%  runtime.writeErr
     0.01s 0.0036% 98.50%      1.94s  0.71%  runtime.printlock
     1.64s   0.6% 99.10%      1.65s   0.6%  runtime.usleep
(pprof) list runtime.printint
Total: 4.58mins
ROUTINE ======================== runtime.printint in /usr/local/opt/go/libexec/src/runtime/print.go
         0   3.62mins (flat, cum) 79.01% of Total
         .          .    211:func printint(v int64) {
         .          .    212:	if v < 0 {
         .          .    213:		printstring("-")
         .          .    214:		v = -v
         .          .    215:	}
         .   3.62mins    216:	printuint(uint64(v))
         .          .    217:}
         .          .    218:
         .          .    219:func printhex(v uint64) {
         .          .    220:	const dig = "0123456789abcdef"
         .          .    221:	var buf [100]byte
(pprof) list github.com/corsc/Beyond-Effective-Go/Chapter03/02_wha
t_to_optimize/01_cpu_profiling/game.Shuffle
Total: 4.58mins
ROUTINE ======================== github.com/corsc/Beyond-Effective-Go/Chapter03/03_pprof/01_cpu_profiling/game.Shuffle in [removed]/go/src/github.com/corsc/Beyond-Effective-Go/Chapter03/03_pprof/01_cpu_profiling/game/cards.go
    52.55s   4.54mins (flat, cum) 99.28% of Total
         .          .      5:	"time"
         .          .      6:)
         .          .      7:
         .          .      8:// Shuffle randomizes the order of the supplied cards
         .          .      9:func Shuffle(cards []Card) {
         .       60ms     10:	rand.Seed(time.Now().UnixNano())
      60ms      210ms     11:	rand.Shuffle(len(cards), func(a, b int) {
         .          .     12:		cards[a], cards[b] = cards[b], cards[a]
         .          .     13:	})
         .          .     14:
         .          .     15:	waste :=0
     390ms      390ms     16:	for x := 0; x < 1000000; x++ {
         .          .     17:		// waste some CPU
    52.10s     52.10s     18:		waste++
         .          .     19:	}
         .   3.66mins     20:	println(waste)
         .          .     21:}
         .          .     22:
         .          .     23:// Card represents a single playing card
         .          .     24:type Card struct {
         .          .     25:	Suit string