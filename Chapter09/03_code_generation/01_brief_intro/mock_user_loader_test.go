// Code generated by mockery v2.42.1. DO NOT EDIT.

package _1_brief_intro

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockUserLoader is an autogenerated mock type for the UserLoader type
type MockUserLoader struct {
	mock.Mock
}

// LoadByID provides a mock function with given fields: ctx, userID
func (_m *MockUserLoader) LoadByID(ctx context.Context, userID int64) (*User, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for LoadByID")
	}

	var r0 *User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*User, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *User); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockUserLoader creates a new instance of MockUserLoader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserLoader(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserLoader {
	mock := &MockUserLoader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
